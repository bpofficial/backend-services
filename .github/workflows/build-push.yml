name: Build and Push Docker Images

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    name: Determine Changed Projects
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.determine-changed-projects.outputs.changed }}

    steps:
    - name: Check Out Repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Determine Changed Projects
      id: determine-changed-projects
      run: |
        if git rev-parse HEAD~1 >/dev/null 2>&1; then
            CHANGED_APPS=$(git diff --name-only HEAD~1 HEAD | grep '^apps/' | awk -F/ '{print $2}' | uniq)
        else
            CHANGED_APPS=$(git ls-tree -r --name-only HEAD | grep '^apps/' | awk -F/ '{print $2}' | uniq)
        fi
        CHANGED_APPS_JSON="[$(echo $CHANGED_APPS | sed 's/ /", "/g' | sed 's/^/"/' | sed 's/$/"/')]"
        echo "$CHANGED_APPS_JSON"
        echo "changed=$CHANGED_APPS_JSON" >> $GITHUB_ENV
        echo "changed=$CHANGED_APPS_JSON" >> $GITHUB_OUTPUT

  build:
    name: Build and Push Images
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: ${{fromJson(needs.setup.outputs.changed)}}
    steps:
    # Try to log in early to avoid unnecessary work
    - name: Log in to Container Registry
      run: echo ${{ secrets.REGISTRY_SECRET }} | docker login -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin ${{ secrets.REGISTRY_URL }}

    - name: Check Out Repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Get yarn cache directory path
      run: echo "YARN_CACHE_DIR=$(yarn cache dir)" >> $GITHUB_ENV

    - name: Cache yarn dependencies
      uses: actions/cache@v3
      with:
        path: ${{ env.YARN_CACHE_DIR }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install Dependencies
      run: yarn install

    - name: Install Nest CLI
      run: yarn global add @nestjs/cli

    - name: Build Service
      run: nest build ${{ matrix.project }}

    - name: Create Image
      run: |
        PROJECT=${{ matrix.project }}
        echo "Building image for $PROJECT"
        VERSION=$(date +%s)
        DOCKER_IMAGE="${{ secrets.REGISTRY_URL }}/service-$PROJECT:$VERSION"
        docker build -t $DOCKER_IMAGE --build-arg BUILD_PATH=dist/apps/$PROJECT .
        echo "DOCKER_IMAGE=$DOCKER_IMAGE" >> $GITHUB_ENV

    - name: Push Image to Registry
      run: |
        echo "Pushing image for ${{ matrix.project }}"
        echo "${{ matrix.project }}=${DOCKER_IMAGE}" >> build-info.txt
        docker push $DOCKER_IMAGE

    - name: Upload build info
      uses: actions/upload-artifact@v3
      with:
        name: build-info-${{ matrix.project }}
        path: build-info.txt

  finalise:
    name: Update ArgoCD
    runs-on: ubuntu-latest
    needs: build
    if: always() # This ensures the job runs even a build fails
    steps:
      - name: Check Out Repository
        uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Combine and Process Build Info
        run: |
          for dir in build-info-*; do
            if [ -d "$dir" ]; then
              cat "$dir/build-info.txt" >> combined-build-info.txt
            fi
          done

      - name: Update ArgoCD Manifests
        run: |
          while IFS='=' read -r project image_tag; do
            deployment_file="apps/${project}/deployment.yml"
            if [ -f "$deployment_file" ]; then
              sed -i "s|image: .*|image: ${image_tag}|" "$deployment_file"
            else
              echo "Deployment file for ${project} not found"
            fi
          done < combined-build-info.txt

      - name: Commit and Push Changes
        run: |
          git config --local user.name "GitHub Action"
          git config --local user.email "action@github.com"
          git add apps/
          git diff --staged --quiet || {
            git commit -m "Update image tags for applications [skip ci]"
            git push
          }
