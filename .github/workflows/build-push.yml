name: Build and Push Docker Images

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.determine-changed-projects.outputs.changed }}

    steps:
    - name: Check Out Repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Determine Changed Projects
      id: determine-changed-projects
      run: |
        if git rev-parse HEAD~1 >/dev/null 2>&1; then
            CHANGED_APPS=$(git diff --name-only HEAD~1 HEAD | grep '^apps/' | awk -F/ '{print $2}' | uniq)
        else
            CHANGED_APPS=$(git ls-tree -r --name-only HEAD | grep '^apps/' | awk -F/ '{print $2}' | uniq)
        fi
        CHANGED_APPS_JSON=$(echo $CHANGED_APPS | jq -R -s -c 'split("\n")[:-1]')
        echo "changed=$CHANGED_APPS_JSON" >> $GITHUB_OUTPUT

  build:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{fromJson(needs.setup.outputs.changed)}}
    steps:
    # Try to log in early to avoid unnecessary work
    - name: Log in to Container Registry
      run: echo ${{ secrets.REGISTRY_SECRET }} | docker login -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin ${{ secrets.REGISTRY_URL }}

    - name: Check Out Repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Get yarn cache directory path
      run: echo "YARN_CACHE_DIR=$(yarn cache dir)" >> $GITHUB_ENV

    - name: Cache yarn dependencies
      uses: actions/cache@v2
      with:
        path: ${{ env.YARN_CACHE_DIR }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install Dependencies
      run: yarn install

    - name: Build and Push Image
      run: |
        PROJECT=${{ matrix.project }}
        echo "Building image for $PROJECT"
        VERSION=$(date +%s)
        DOCKER_IMAGE="${{ secrets.REGISTRY_URL }}/service-$PROJECT:$VERSION"
        docker build -t $DOCKER_IMAGE -f ./Dockerfile ./apps/$PROJECT
        docker push $DOCKER_IMAGE
